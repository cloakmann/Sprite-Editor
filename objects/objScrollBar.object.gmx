<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//0 - horizontal
//1 - vertical
scrollDirection = 1;

width = 0;
height = 0;

parent = noone;

scrCheckSingleton();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(parent!= noone){
    with parent other.depth = depth - 1;
    draw_set_alpha(0.6);
    draw_set_color(c_white)
    //draw the outline for scrollbar
    draw_rectangle(x,y,x + width, y + height,1);

    //the height of "bar" part container
    var posRange = height - 32 * 2;
        
    //draw the upper and lower arrow
    draw_sprite_ext(sprScrollArrow,0,x + 16, y + 16,1,1,0,c_white,0.6)
    draw_sprite_ext(sprScrollArrow,0,x + 16, y + height - 15,1,1,180,c_white,0.6);
    
    
    //whether pressed top button
    var pressTop = scrCursorWithin(x,y,x + width, y + 32);
    var pressBottom = scrCursorWithin(x,y + height - 32,x + width, y + height);
    
    var minPos = 0;
    var maxPos = parent.childCount - parent.childPerPage;
    
    if((pressTop) and mouse_check_button_pressed(mb_left)){
        //user click on top button event
        parent.currentTop = max(minPos,parent.currentTop - 1);
    }
    if((pressBottom) and mouse_check_button_pressed(mb_left)){
        //user click on top button event
        parent.currentTop = min(maxPos,parent.currentTop + 1);
    }
    if(scrCursorWithin(x,y + 32,x + width, y + height - 32) and mouse_check_button(mb_left)){
        //user click on "bar" part event
        var curY = min(max(0,mouse_y - (y + 32)),y + height - 32);
        var curPos = floor((curY / posRange) * parent.childCount);
        
        //curPos âˆˆ [minPos, maxPos]
        parent.currentTop = min(maxPos,max(minPos,curPos));
    }
    
    //draw the position of current page relative to "full" page
    draw_set_color(c_gray)

    var posUpper = parent.currentTop * posRange/ parent.childCount;
    var posLower = (parent.currentTop + parent.childPerPage) * posRange/ parent.childCount;
    draw_rectangle(x,y + 32 + posUpper,x + width, y + 32 + posLower,0);
    
    
    scrResetFormat();
    exit;
}
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
