<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

display = instance_create(x + 20, y + 10 + 20, objMenuDemoDisplay);
display.parent = id;


save = instance_create(x + objGenBlockMenu.menuWidth - 50 - 32, y + 10 + 16 + 20, objMenuSaveButton);
save.parent = display.id;

surf1 = surface_create(32,32);
surf2 = surface_create(32,32);
//this surf is for template drawing shiny effect
surf3 = surface_create(32,32);

//surfSpike - surfCrop = spike + effect

//the long sprite with (common spike + effect_rect)
surfSpike = surface_create(32,32)

//the long sprite with spike template for later cropping
surfCrop = surface_create(32,32)

scrCheckSingleton();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf1))surface_free(surf1);
if (surface_exists(surf2))surface_free(surf2);
if (surface_exists(surf3))surface_free(surf3);

if (surface_exists(surfSpike))surface_free(surfSpike);
if (surface_exists(surfCrop))surface_free(surfCrop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(sprite_exists(objDisplay.sprite_index)){
    var tempWidth;
    if (objSetSpikeEffect.currentStyle){
        tempWidth = 32*objSetSpikeEffect.numOfFrames.value;
    }
    else {
        tempWidth = 32;
    }
    if(surface_exists(surf2) and tempWidth != surface_get_width(surf2)){
        //if (surface_exists(surf2))surface_free(surf2);
        if (surface_exists(surf2))surface_resize(surf2,tempWidth,32);
        if (surface_exists(surfSpike))surface_resize(surfSpike,tempWidth,32);
        if (surface_exists(surfCrop))surface_resize(surfCrop,tempWidth,32);
        exit;
    }
    

    if (!surface_exists(surf1))surf1 = surface_create(32,32);
    if (!surface_exists(surf2)){
        //surf2 = surface_create(32,32);
        if(objSetSpikeEffect.currentStyle == 0)surf2 = surface_create(32,32);
        else {
            //recreate a new surf according to numOfFrames
            var tempWidth = 32*objSetSpikeEffect.numOfFrames.value;
            var tempHeight = 32;
            surf2 = surface_create(tempWidth,tempHeight);
            //show_message("recreated width: " + string(tempWidth) + " height: " + string(tempHeight))
        }
    }
    if (!surface_exists(surf3))surf3 = surface_create(32,32);
    
    //draw the surface
    if(objSetSpikeEffect.currentStyle == 0){
        //draw the 32 * 32 scaled square sprite on surf1 first
        surface_set_target(surf1);
        draw_clear_alpha(c_black,0);
        
        with(objDisplay){
            draw_sprite_ext(sprite_index,image_index,0,0,32/sprite_width,32/sprite_height,image_angle,image_blend,image_alpha);
        }
        surface_reset_target();
        
        shader_set(shadCustomSV);
        shader_set_uniform_f(global.uni_saturation,global.saturation);
        shader_set_uniform_f(global.uni_value,global.value);
        //draw the spike on surf2
        surface_set_target(surf2);
        draw_clear_alpha(c_black,0);
        
        for (i = 0; i &lt; 16; i+=1){
            draw_surface_part(surf1,    0,          i*2,(i+1),2,15-i,i*2);
            draw_surface_part(surf1,    32-(i+1),   i*2,(i+1),2,16,i*2);
        }
        scrDrawSpikeBorder();
        
        shader_reset();
        surface_reset_target();
    }
    else {
        //draw the common spike first
        //get normal spike2 from global.displaySurf directly
        surface_set_target(surf1);
        draw_clear_alpha(c_black,0);
        for (j = 0; j &lt; 16; j+=1){
            draw_surface_part(global.displaySurf,    0,          j*2,(j+1),2,15-j,j*2);
            draw_surface_part(global.displaySurf,    32 -(j+1),  j*2,(j+1),2,16,j*2);
        }
        surface_reset_target();
        
        
        var surfWidth = objSetSpikeEffect.numOfFrames.value * 32;
        var surfHeight = 32;
        
        if (!surface_exists(surfSpike))surfSpike = surface_create(tempWidth,32);
        if (!surface_exists(surfCrop))surfCrop = surface_create(tempWidth,32);
        
        surface_set_target(surfSpike);
        draw_clear_alpha(c_black,0);
        surface_reset_target();
        
        surface_set_target(surfCrop);
        draw_clear_alpha(c_black,0);
        surface_reset_target();

        //var surfSpike = surface_create(surfWidth,surfHeight);

        //var surfCrop = surface_create(surfWidth,surfHeight);
        
        var tempRange = 32 + objSetSpikeEffect.setWidth.value;
        var tempFrameNum = objSetSpikeEffect.numOfFrames.value;
        var tempColor = objSetSpikeEffect.color.color;
        var tempAlpha = objSetSpikeEffect.setTrans.value;
        var tempWidth = objSetSpikeEffect.setWidth.value;
        
        //for(i = 0; i &lt; objSetSpikeEffect.numOfFrames.value; i++){
        for(i = 0; i &lt; tempFrameNum; i++){
            surface_set_target(surfSpike);
            //draw the common spike
            draw_surface(surf1,32 * i,0);
            //draw the effect
            scrDrawShinyRect2(tempRange,tempFrameNum,tempColor,tempAlpha,tempWidth);
            surface_reset_target();
            
            surface_set_target(surfCrop);
            //draw the common spike
            draw_sprite(sprSpikeTemplate,0,32 * i,0);
            surface_reset_target();
        }
        

        
        //surfSpikeRect - surfCrop = output without border
        surface_set_target(surfSpike);
        draw_set_blend_mode_ext(bm_zero,bm_src_alpha);
        draw_surface(surfCrop,0,0);
        scrResetFormat();
        surface_reset_target();

        //draw surf2 with shader
        shader_set(shadCustomSV);
        shader_set_uniform_f(global.uni_saturation,global.saturation);
        shader_set_uniform_f(global.uni_value,global.value);
        surface_set_target(surf2);
        draw_surface(surfSpike,0,0);
        surface_reset_target();
        shader_reset();
        
        //free the temp surfaces
        //if (surface_exists(surfSpike))surface_free(surfSpike);
        //if (surface_exists(surfCrop))surface_free(surfCrop);
        
        //draw the border
        //for(i = 0; i &lt; objSetSpikeEffect.numOfFrames.value; i++){
        
        var color1 = objSetSpriteBorder.color1.color;
        var color2 = objSetSpriteBorder.color2.color;
        tempWidth = objSetSpriteBorder.currentWidth;
        tempTrans = objSetSpriteBorder.currentTransparency;
        surface_set_target(surf2);
        for(i = 0; i &lt; tempFrameNum; i++){
            
            scrDrawSpikeBorder2(i * 32, 0,color1,color2,tempWidth,tempTrans);
            
        }
        surface_reset_target();
        /*
        for(i = 0; i &lt; objSetSpikeEffect.numOfFrames.value; i++){
            //draw the 32 * 32 scaled square sprite on surf1 first
            surface_set_target(surf1);
            draw_clear_alpha(c_black,0);
            
            with(objDisplay){
                draw_sprite_ext(sprite_index,image_index,0,0,32/sprite_width,32/sprite_height,image_angle,image_blend,image_alpha);
            }
            surface_reset_target();
            
            shader_set(shadCustomSV);
            shader_set_uniform_f(global.uni_saturation,global.saturation);
            shader_set_uniform_f(global.uni_value,global.value);
            
            //draw normal spike2 on surf3
            surface_set_target(surf3);
            draw_clear_alpha(c_black,0);
            
            for (j = 0; j &lt; 16; j+=1){
                draw_surface_part(surf1,    0,          j*2,(j+1),2,15-j,j*2);
                draw_surface_part(surf1,    32 -(j+1),  j*2,(j+1),2,16,j*2);
            }
            
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
            
            //draw the spike with effect on surf1 and crop it to triangle
            surface_set_target(surf1);
            draw_clear_alpha(c_black,0);
            draw_surface(surf3,0,0);
            scrDrawShinyRect();
            //crop a spike from surf1 with effect
            draw_set_blend_mode_ext(bm_zero,bm_src_alpha);
            draw_sprite(sprSpikeTemplate,0,0,0);
            shader_reset();
            //borders does not need shader!!
            scrDrawSpikeBorder();
            surface_reset_target();
            
            //draw the finished spike on surf2
            surface_set_target(surf2);
            draw_set_blend_mode(bm_normal)
            draw_surface(surf1,32*i,0);
            //draw_surface(surf3,32*i,0);
            surface_reset_target();
            scrResetFormat();
        }
        */
        
    }
    with (display){
        var tempOutputSprite = -1;
        if(objSetSpikeEffect.currentStyle != 0){
                        
            //need multi subimage
            var tempWidth = surface_get_width(other.surf2);
            var tempHeight = surface_get_height(other.surf2);
            
            //window_set_caption("multi" + " w: " + string(tempWidth) + " h: " + string(tempHeight))
            tempOutputSprite = sprite_create_from_surface(other.surf2,0,0,tempWidth,tempHeight,0,1,0,0);
        }
        else{
            //no need for multi subimage
            tempOutputSprite = sprite_create_from_surface(other.surf2,0,0,32,32,0,1,0,0);
        }
        multiImage = (objSetSpikeEffect.currentStyle != 0);
        if !sprite_exists(sprite_index) {
            //assign new sprite
            sprite_index = tempOutputSprite;
        }
        else {
            //replace new sprite
            sprite_delete(sprite_index);
            sprite_index = tempOutputSprite;
        }
    }
    exit;
}

exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(x + 20, y, "normal spike 2");

scrResetFormat()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
