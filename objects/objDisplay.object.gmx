<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dName = 0;
rawImage = noone;

x = 0;
y = 0;

displayWidth = 200;


//global.dName = working_directory;


if (directory_exists("C:\Users\User\Desktop"))global.dName = "C:\Users\User\Desktop";
else if (directory_exists("C:\Users\User\Documents"))global.dName = "C:\Users\User\Documents"
else if (directory_exists("C:\Users\User\Downloads"))global.dName = "C:\Users\User\Downloads"
else global.dName = program_directory;

global.uni_saturation = shader_get_uniform(shadCustomSV,"saturation")
global.uni_value = shader_get_uniform(shadCustomSV,"value")
global.saturation = 0;
global.value = 0;

uni_maxVal = shader_get_uniform(shadCustomSV,"maxVal")
maxVal = 2;


//global.dName = program_directory;

/*
getImage = instance_create(50 + displayWidth * 0.5,50 + displayWidth + 40,objGetImage);
clearDisplay = instance_create(50 + displayWidth * 0.5,50 + displayWidth + 40 * 2,objClearDisplay);
*/
displayY = 50 + displayWidth + 40

getImage = instance_create(displayWidth * 0.5,displayY,objGetImage);
clearDisplay = instance_create(displayWidth * 0.5 + 100,50 + displayWidth + 40,objClearDisplay);

displayY += 40;
pickImage = instance_create(displayWidth * 0.5,displayY,objPickImage);

displayY += 45;
showShortcut = instance_create(displayWidth,displayY,objShowShortcut);

displayY += 40;
setBorder = instance_create(displayWidth,displayY,objSetSpriteBorder);


displayY += 110;

setValue = instance_create(20,displayY,objSetValue);
setValue.trailing = "value";
setValue.sectionBorder = 300;
setValue.parent = id;
setValue.value = 127;


displayY += 40;

setSaturation = instance_create(20,displayY,objSetValue);
setSaturation.trailing = "saturation";
setSaturation.sectionBorder = 300;
setSaturation.parent = id;
setSaturation.value = 127;

genBlock = instance_create(300,0,objGenBlockMenu);
genSpike = instance_create(300,0,objGenSpikeMenu);

//turns true when cursor within range of an active button
setDrag = false;

//saves the 32 * 32 sprite within a single global surf
//surf without SV shader
global.displaySurf = surface_create(32,32)

minFps = 100;
maxFps = 100;

scrCheckSingleton();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//to avoid memory leak
if (sprite_exists(sprite_index))sprite_delete(sprite_index);

if surface_exists(global.displaySurf)surface_free(global.displaySurf)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if the cursor should be cr_drag
setDrag = false;
with(objSpecialButtons){
    if (scrCursorInRange() and !instance_exists(objWindow))other.setDrag = true;
}
with objOutlinedButton {
    var window = -1;
    if instance_exists(objWindow)window = objWindow.id;
    if (scrCursorWithin(x,y,x + width, y + height) and (window == -1 or parent.id == window))
        other.setDrag = true;
}

if setDrag window_set_cursor(cr_drag);
else window_set_cursor(cr_default)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(keyboard_check_pressed(ord('T'))){
    maxFps = 100;
    minFps = 100;
}


if(fps_real &gt; maxFps){
    maxFps = fps_real;
}
if (fps_real &lt; minFps){
    minFps = fps_real;
}


window_set_caption("Sprite Editor max FPS:" + string(maxFps) + " min FPS: " + string(minFps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_alpha(0.5);
draw_rectangle_color(50,50,50 + displayWidth,50 + displayWidth,c_gray,c_gray,c_gray,c_gray,0);
draw_set_alpha(1);
*/

global.saturation = setSaturation.value / 255;
global.value = setValue.value / 255;


if sprite_exists(sprite_index){
    //maintain the two displaySurf to share with all sprite generator
    if !surface_exists(global.displaySurf)global.displaySurf = surface_create(32,32)
    
    
    //draw the surface without SV shader
    surface_set_target(global.displaySurf);
    draw_clear_alpha(c_black,0)
    draw_sprite_ext(sprite_index,image_index,0,0,32/sprite_width,32/sprite_height,image_angle,image_blend,image_alpha);    
    surface_reset_target();
    
    shader_set(shadCustomSV);
    shader_set_uniform_f(global.uni_saturation,global.saturation);
    shader_set_uniform_f(global.uni_value,global.value);

    draw_sprite_ext(sprite_index,image_index,50,50,displayWidth/sprite_width,displayWidth/sprite_height,image_angle,image_blend,image_alpha);
    shader_reset()
}
draw_set_color(c_white);
scrDrawRectangleWidth(50,50,50 + displayWidth,50 + displayWidth,2);

if(scrCursorWithin(50,50,50 + displayWidth,50 + displayWidth) and mouse_check_button_pressed(mb_left)){
    if(sprite_exists(sprite_index) and !instance_exists(objWindow)){
        p = instance_create(0,0,objPickImageWindow);
        p.sprite_index = sprite_index;
    }
}



scrResetFormat();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
