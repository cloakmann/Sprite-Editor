<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//value is parent's corr. value, e.g. image's pickSize
value = 0;
//setValue is parent's new value upon clicking this button
setValue = 0;

//width and height of the button
width = 0;
height = 0;

parent = noone;

cursorWithin = scrCursorWithin(x,y,x + width,y + height);

//whether is a title button which need t/f return value only
isTextButton = false;
buttonTitle = "";

//the title for all popup windows
windowTitle = "";

//whether need popup window
needPopup = false;
popupType = "none";

//if this is true it should return an integer from get_integer function
iniIntOutput = 0;

//if a new value comes in notify parent to collect it
refresh = false;

//max and min value that could be accepted(only when input integer),default both -1
minValue = -1;
maxValue = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(parent != noone){
    //any button that needPopIntegerWindow is true 
    //is automatically a text button
    if needPopup {
        isTextButton = true;
        buttonTitle = string(value);
    }

    //if the button is a confirm button set the setValue = true
    if isTextButton setValue = true;
    //alway on top of parent
    with (parent)other.depth = depth - 1;

    cursorWithin = scrCursorWithin(x,y,x + width,y + height);
    
    if(scrCursorWithin(x,y,x + width, y + height)){
        var window = -1;
        if instance_exists(objWindow)window = objWindow.id;
        
        //if there is a popup window
        //outlined button should not do anything unless its parent is the window itself
        if(mouse_check_button_pressed(mb_left) and (window == -1 or parent.id == window)){
            if !needPopup value = setValue;
            else {                
                switch(popupType){
                    case "none": break;
                    case "integer":
                        value = get_integer(windowTitle,iniIntOutput);
                        if(maxValue != -1)value = min(value,maxValue);
                        if(minValue != -1)value = max(value,minValue);
                        break;
                }
                refresh = true;
            }
        }
    }
    else {
        //if popup the value should persist
        if !needPopup value = 0;
    }
    exit;
}
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_rectangle(x,y,x + width, y + height, 1);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
if !isTextButton draw_text(x + width / 2, y + height/2, string(setValue));
else draw_text(x + width / 2, y + height /2, buttonTitle);

scrResetFormat();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
