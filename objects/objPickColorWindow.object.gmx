<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50000</depth>
  <persistent>0</persistent>
  <parentName>objWindow</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>parent = noone;

title = "Pick Color"

//margin = 100;
margin = 60;

displayX = x + margin;
displayY = y + margin;


close = instance_create(room_width - (displayX + 40), displayY + 8, objCloseWindow);
close.parent = id;


currentHue = 160;
currentSaturation = 0;
currentValue = 240;

currentRed = 255;
currentGreen = 255;
currentBlue = 255;


row = -1;


//6*8 types of common colors
row += 1;
color[row * 8 + 0]=make_color_rgb(255,128,128);
color[row * 8 + 1]=make_color_rgb(255,255,128);
color[row * 8 + 2]=make_color_rgb(128,255,128);
color[row * 8 + 3]=make_color_rgb(0,255,128);
color[row * 8 + 4]=make_color_rgb(128,255,255);
color[row * 8 + 5]=make_color_rgb(0,128,255);
color[row * 8 + 6]=make_color_rgb(255,128,192);
color[row * 8 + 7]=make_color_rgb(255,128,255,);

row += 1;
color[row * 8 + 0]=make_color_rgb(255,0,0);
color[row * 8 + 1]=make_color_rgb(255,255,0);
color[row * 8 + 2]=make_color_rgb(128,255,0);
color[row * 8 + 3]=make_color_rgb(0,255,64);
color[row * 8 + 4]=make_color_rgb(0,255,255,);
color[row * 8 + 5]=make_color_rgb(0,128,192);
color[row * 8 + 6]=make_color_rgb(128,128,192);
color[row * 8 + 7]=make_color_rgb(255,0,255,);

row += 1;
color[row * 8 + 0]=make_color_rgb(128,64,64);
color[row * 8 + 1]=make_color_rgb(255,128,64);
color[row * 8 + 2]=make_color_rgb(0,255,0);
color[row * 8 + 3]=make_color_rgb(0,128,128,);
color[row * 8 + 4]=make_color_rgb(0,64,128,);
color[row * 8 + 5]=make_color_rgb(128,128,255,);
color[row * 8 + 6]=make_color_rgb(128,0,64);
color[row * 8 + 7]=make_color_rgb(255,0,128,);

row += 1;
color[row * 8 + 0]=make_color_rgb(128,0,0);
color[row * 8 + 1]=make_color_rgb(255,128,0);
color[row * 8 + 2]=make_color_rgb(0,128,0);
color[row * 8 + 3]=make_color_rgb(0,128,64);
color[row * 8 + 4]=make_color_rgb(0,0,255,);
color[row * 8 + 5]=make_color_rgb(0,0,160);
color[row * 8 + 6]=make_color_rgb(128,0,128,);
color[row * 8 + 7]=make_color_rgb(128,0,255,);


row += 1;
color[row * 8 + 0]=make_color_rgb(64,0,0);
color[row * 8 + 1]=make_color_rgb(128,64,0);
color[row * 8 + 2]=make_color_rgb(0,64,0);
color[row * 8 + 3]=make_color_rgb(0,64,64);
color[row * 8 + 4]=make_color_rgb(0,0,128,);
color[row * 8 + 5]=make_color_rgb(0,0,64);
color[row * 8 + 6]=make_color_rgb(64,0,64);
color[row * 8 + 7]=make_color_rgb(64,0,128,);

row += 1;
color[row * 8 + 0]=make_color_rgb(0,0,0);
color[row * 8 + 1]=make_color_rgb(128,128,0);
color[row * 8 + 2]=make_color_rgb(128,128,64);
color[row * 8 + 3]=make_color_rgb(128,128,128,);
color[row * 8 + 4]=make_color_rgb(64,128,128,);
color[row * 8 + 5]=make_color_rgb(192,192,192);
color[row * 8 + 6]=make_color_rgb(64,0,64);
color[row * 8 + 7]=make_color_rgb(255,255,255,);


//the surface to draw the color palette
//palette = surface_create(240,240)
palette = surface_create(255,255)

//flag for dragging both parts
draggingPalette = false;
draggingValue = false;

//the button to set hsv and rgb values
//tempXxx is for common data of popup buttons

/*
tempValue = 
[currentHue,currentSaturation,currentValue,
currentRed,currentGreen,currentBlue]
*/
var tempValue;
tempValue[0] = currentHue;
tempValue[1] = currentSaturation;
tempValue[2] = currentValue;

tempValue[3] = currentRed;
tempValue[4] = currentGreen;
tempValue[5] = currentBlue;

var tempTitle;
tempTitle[0] = "hue";
tempTitle[1] = "saturation";
tempTitle[2] = "value";
tempTitle[3] = "red";
tempTitle[4] = "green";
tempTitle[5] = "blue";

var tempWidth = 50;
var tempHeight = 32;

//colorInfo = [hButton,sButton,vButton,rButton,gButton,bButton]
colorInfo = 0;
for (i = 0; i &lt; 6; i ++){
    colorInfo[i] = instance_create(x,y,objOutlinedButton);
    colorInfo[i].parent = id;
    colorInfo[i].needPopup = true;
    colorInfo[i].popupType = "integer";
    colorInfo[i].value = tempValue[i];
    colorInfo[i].windowTitle = "please input the new value of " + string(tempTitle[i]);
    colorInfo[i].width = tempWidth;
    colorInfo[i].height = tempHeight;
}

//the confirm button
confirmButton = instance_create(x,y,objOutlinedButton);
confirmButton.parent = id;
confirmButton.isTextButton = true;
confirmButton.buttonTitle = "Confirm"
confirmButton.width = 150;
confirmButton.height = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(palette)surface_free(palette)

with objOutlinedButton if parent == other.id instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw title</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_rectangle_color(margin, margin, room_width - margin, room_height - margin, c_black,c_black,c_black,c_black,0)
draw_rectangle_color(margin, margin, room_width - margin, room_height - margin, c_white,c_white,c_white,c_white,1)

displayX = x + margin + 24;
displayY = y + margin + 24;

draw_set_font(fHeader12)
draw_text(displayX,displayY,title)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw the form of colors</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var tempColor;

displayY += 33

for(row = 0; row &lt; 6; row += 1){
    displayX = x + margin + 24;
    for (col = 0; col &lt; 8; col += 1){
        tempColor = color [row * 8 + col];
        draw_rectangle_color(displayX,displayY, displayX + 24,displayY + 24,tempColor,tempColor,tempColor,tempColor,0)
        draw_rectangle(displayX,displayY, displayX + 24,displayY + 24,1);
        
        if(scrCursorWithin(displayX,displayY, displayX + 24,displayY + 24,) and mouse_check_button_pressed(mb_left)){
            currentHue = color_get_hue(tempColor);
            currentSaturation = color_get_saturation(tempColor);
            currentValue = color_get_value(tempColor);
            
            currentRed = color_get_red(tempColor);
            currentGreen = color_get_green(tempColor);
            currentBlue = color_get_blue(tempColor);
            
        }
        displayX += 35;
    }
    displayY += 39
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw the rgb-hsv display section</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>displayY += 8;

/*
the outcome should be 
Hue     xxx     Red     xxx
Sat.    xxx     Green   xxx
Value   xxx     Blue    xxx
*/

var row,col;

var displayTitle = 0;
displayTitle[0] = "Hue";
displayTitle[1] = "Sat.";
displayTitle[2] = "Value";
displayTitle[3] = "Red";
displayTitle[4] = "Green";
displayTitle[5] = "Blue";

displayX = x + margin + 24;

for (i = 0; i &lt; 6; i ++){
    row = i mod 3;
    col = floor(i / 3);
    draw_text(displayX + 140 * col,displayY + 40 * row + 8, displayTitle[i]);
    
    colorInfo[i].x = x + margin + 24 + 70 + 140 * col;
    colorInfo[i].y = displayY + 40 * row;
    
    if (colorInfo[i].cursorWithin){
        if(colorInfo[i].refresh){
           colorInfo[i].value = max(0,min(colorInfo[i].value,255));
           
           switch(i){
                case 0:
                    currentHue = colorInfo[i].value;
                    break;
                case 1:
                    currentSaturation = colorInfo[i].value;
                    break;
                case 2:
                    currentValue = colorInfo[i].value;
                    break;
                case 3:
                    currentRed = colorInfo[i].value;
                    break;
                case 4:
                    currentGreen = colorInfo[i].value;
                    break;
                case 5:
                    currentBlue = colorInfo[i].value;
                    break;
            }
           colorInfo[i].refresh = false;
        }
    }
    
    
}

scrResetFormat();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw the hsv palette</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw the hsv palette
if !surface_exists(palette)palette = surface_create(255,255);

displayX = x + margin + 24 + 302;
displayY = y + margin + 24;

//draw the color palette
surface_set_target(palette);
for(i = 0; i &lt; 255; i+= 1){
    //draw_line_color(i,239,i,0,make_color_hsv(i,0,120),make_color_hsv(i,240,240))
    draw_line_color(i,254,i,0,make_color_hsv(i,0,128),make_color_hsv(i,255,255))
}

surface_reset_target();

draw_surface(palette,displayX,displayY);


//dynamic change hsv and rgb value according to mouse_x and mouse_y that lies within area of palette
if(scrCursorWithin(displayX,displayY,displayX + surface_get_width(palette),displayY +surface_get_height(palette))){
    if(mouse_check_button(mb_left)){
        draggingPalette = true;
    }
}
if(draggingPalette and !draggingValue){
    var tempMouseX, tempMouseY;
    
    tempMouseX = min(max(mouse_x,displayX),displayX + surface_get_width(palette));
    tempMouseY = min(max(mouse_y,displayY),displayY + surface_get_height(palette));
    
    
    //refresh the hue for demo color and display button
    currentHue = min(max(mouse_x,displayX),displayX + surface_get_width(palette)) - displayX;
    colorInfo[0].value = currentHue;
    
    //refresh the saturation for demo color and display button
    currentSaturation = 255 - min(max(mouse_y,displayY) - displayY,255);
    colorInfo[1].value = currentSaturation;
    
    //refresh the rgb for demo color and display button
    currentRed = color_get_red(make_color_hsv(currentHue,currentSaturation,currentValue));
    currentGreen = color_get_green(make_color_hsv(currentHue,currentSaturation,currentValue));
    currentBlue = color_get_blue(make_color_hsv(currentHue,currentSaturation,currentValue));
    
    colorInfo[3].value = currentRed;
    colorInfo[4].value = currentGreen;
    colorInfo[5].value = currentBlue;
}
if(mouse_check_button_released(mb_left)){
    draggingPalette = false;
}

draw_sprite(sprChoosePaletteColor,0,displayX + currentHue,displayY + 255 - currentSaturation);


//draw the drag value gauge
draw_rectangle_color(
    displayX + 255 + 16,displayY,displayX + 255 + 16 + 16,displayY + 254,
    make_color_hsv(currentHue,currentSaturation,255),
    make_color_hsv(currentHue,currentSaturation,255),
    make_color_hsv(currentHue,currentSaturation,0),
    make_color_hsv(currentHue,currentSaturation,0),
    0
    );

    
if(scrCursorWithin(displayX + 255 + 16,displayY,displayX + 255 + 16 + 16,displayY + 254)){
    if(mouse_check_button(mb_left)){
        draggingValue = true;
    }
}

//dynamic change hsv and rgb value according to mouse_x and mouse_y that lies within area of gauge
if(draggingValue and !draggingPalette){
    var tempMouseX, tempMouseY;
    
    tempMouseX = min(max(mouse_x,displayX + 255 + 16),displayX + 255 + 16 + 16);
    tempMouseY = min(max(mouse_y,displayY),displayY + 254);
    //window_views_mouse_set(tempMouseX,tempMouseY);
    
    //refresh the value for demo color and display button
    currentValue = displayY + 255 - min(max(mouse_y,displayY),displayY + 255);
    colorInfo[2].value = currentValue;
    
    //refresh the rgb for demo color and display button
    currentRed = color_get_red(make_color_hsv(currentHue,currentSaturation,currentValue));
    currentGreen = color_get_green(make_color_hsv(currentHue,currentSaturation,currentValue));
    currentBlue = color_get_blue(make_color_hsv(currentHue,currentSaturation,currentValue));
    
    colorInfo[3].value = currentRed;
    colorInfo[4].value = currentGreen;
    colorInfo[5].value = currentBlue;
}
if(mouse_check_button_released(mb_left)){
    draggingValue = false;
}

draw_rectangle_color(displayX + 255 + 16 ,displayY,displayX + 255 + 16 + 16,displayY + 254,c_white,c_white,c_white,c_white,1);
draw_sprite_ext(sprGaugePointer,0,displayX + 255 + 16 + 8,displayY + 255 - currentValue,1,1,90,c_white,1)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw the demo color rect and confirm button</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>displayX = x + margin + 24 + 302;
displayY += 256 + 16;

var tempColor;
tempColor = make_color_hsv(currentHue,currentSaturation,currentValue)

draw_rectangle_color(displayX,displayY,displayX + 110,displayY + 110,tempColor,tempColor,tempColor,tempColor,0)

draw_set_color(c_white);
scrDrawRectangleWidth(displayX, displayY,displayX + 110, displayY + 110, 3)
//draw_rectangle_color(displayX,displayY,displayX + 110,displayY + 110,c_white,c_white,c_white,c_white,1)

//draw the confirm button
displayX += 156;
displayY += 30;
confirmButton.x = displayX;
confirmButton.y = displayY;
if(confirmButton.cursorWithin and confirmButton.value == confirmButton.setValue){
    parent.color = make_color_rgb(currentRed,currentGreen,currentBlue);
    with(close)event_user(0);
}

scrResetFormat()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
